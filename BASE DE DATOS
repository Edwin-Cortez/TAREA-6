package com.umg.clase12;

import java.sql.*;

public class clase12 {

    public static void main(String[] args) {
        // conexion a la base de datos
        String url = "jdbc:mariadb://localhost:3306/demo_db";
        String user = "root";
        String pass = "123456";

        try {
            Connection conn = DriverManager.getConnection(url, user, pass);
            System.out.println("conectado a la base de datos");

            // LIMPIAR TODO PRIMERO
            Statement clear = conn.createStatement();
            clear.execute("SET FOREIGN_KEY_CHECKS = 0");
            clear.execute("TRUNCATE TABLE cursos_asignados");
            clear.execute("TRUNCATE TABLE estudiante");
            clear.execute("SET FOREIGN_KEY_CHECKS = 1");
            System.out.println("tablas limpiadas");

            // insertar estudiantes
            String insert = "INSERT INTO estudiante(nombre, edad) VALUES (?, ?)";
            PreparedStatement ps = conn.prepareStatement(insert);

            ps.setString(1, "Juan Perez");
            ps.setInt(2, 20);
            ps.executeUpdate();
            System.out.println("insertado: Juan Perez");

            ps.setString(1, "Maria Lopez");
            ps.setInt(2, 19);
            ps.executeUpdate();
            System.out.println("insertado: Maria Lopez");

            ps.setString(1, "Pedro Garcia");
            ps.setInt(2, 21);
            ps.executeUpdate();
            System.out.println("insertado: Pedro Garcia");

            System.out.println("estudiantes insertados");

            // VERIFICAR QUE SE INSERTARON
            Statement check = conn.createStatement();
            ResultSet rsCheck = check.executeQuery("SELECT * FROM estudiante");
            System.out.println("\nVerificando estudiantes:");
            while(rsCheck.next()) {
                System.out.println("ID: " + rsCheck.getInt("id") + " - " + rsCheck.getString("nombre"));
            }

            // insertar cursos para los estudiantes
            String insertCurso = "INSERT INTO cursos_asignados(estudiante_id, nombre, horario) VALUES (?, ?, ?)";
            PreparedStatement ps2 = conn.prepareStatement(insertCurso);

            // cursos para Juan (id 1)
            ps2.setInt(1, 1);
            ps2.setString(2, "Matematicas");
            ps2.setString(3, "lunes 8am");
            ps2.executeUpdate();

            ps2.setInt(1, 1);
            ps2.setString(2, "Programacion");
            ps2.setString(3, "martes 10am");
            ps2.executeUpdate();

            // cursos para Maria (id 2)
            ps2.setInt(1, 2);
            ps2.setString(2, "Base de Datos");
            ps2.setString(3, "miercoles 2pm");
            ps2.executeUpdate();

            ps2.setInt(1, 2);
            ps2.setString(2, "Ingles");
            ps2.setString(3, "jueves 9am");
            ps2.executeUpdate();

            // cursos para Pedro (id 3)
            ps2.setInt(1, 3);
            ps2.setString(2, "Programacion");
            ps2.setString(3, "martes 10am");
            ps2.executeUpdate();

            ps2.setInt(1, 3);
            ps2.setString(2, "Fisica");
            ps2.setString(3, "viernes 3pm");
            ps2.executeUpdate();

            System.out.println("cursos asignados");

            // consulta con join para ver estudiantes y sus cursos
            System.out.println("\nLista de estudiantes con sus cursos:");
            String query = "SELECT estudiante.nombre, cursos_asignados.nombre, cursos_asignados.horario FROM estudiante JOIN cursos_asignados ON estudiante.id = cursos_asignados.estudiante_id";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(query);

            while (rs.next()) {
                System.out.println(rs.getString(1) + " - " + rs.getString(2) + " - " + rs.getString(3));
            }

            // actualizar horario de un curso
            System.out.println("\nactualizando horario...");
            String update = "UPDATE cursos_asignados SET horario = ? WHERE id = ?";
            PreparedStatement ps3 = conn.prepareStatement(update);
            ps3.setString(1, "lunes 2pm");
            ps3.setInt(2, 1);
            ps3.executeUpdate();
            System.out.println("horario actualizado");

            // mostrar despues del update
            System.out.println("\ndespues de actualizar:");
            ResultSet rs2 = st.executeQuery(query);
            while (rs2.next()) {
                System.out.println(rs2.getString(1) + " - " + rs2.getString(2) + " - " + rs2.getString(3));
            }

            // eliminar un estudiante
            System.out.println("\neliminando estudiante...");
            String delete = "DELETE FROM estudiante WHERE id = ?";
            PreparedStatement ps4 = conn.prepareStatement(delete);
            ps4.setInt(1, 3);
            ps4.executeUpdate();
            System.out.println("estudiante eliminado");

            // mostrar lista final
            System.out.println("\nlista final:");
            ResultSet rs3 = st.executeQuery(query);
            while (rs3.next()) {
                System.out.println(rs3.getString(1) + " - " + rs3.getString(2) + " - " + rs3.getString(3));
            }

            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
